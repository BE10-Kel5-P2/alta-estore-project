// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "altaproject2/domain"

	mock "github.com/stretchr/testify/mock"
)

// OrderUseCase is an autogenerated mock type for the OrderUseCase type
type OrderUseCase struct {
	mock.Mock
}

// DeleteOrder provides a mock function with given fields:
func (_m *OrderUseCase) DeleteOrder() {
	_m.Called()
}

// GetOrder provides a mock function with given fields:
func (_m *OrderUseCase) GetOrder() {
	_m.Called()
}

// PostOrder provides a mock function with given fields: neworder, data
func (_m *OrderUseCase) PostOrder(neworder domain.Order, data []domain.ProductOrders) (int, string) {
	ret := _m.Called(neworder, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Order, []domain.ProductOrders) int); ok {
		r0 = rf(neworder, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(domain.Order, []domain.ProductOrders) string); ok {
		r1 = rf(neworder, data)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// Sum provides a mock function with given fields: neworder
func (_m *OrderUseCase) Sum(neworder domain.Order) int {
	ret := _m.Called(neworder)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Order) int); ok {
		r0 = rf(neworder)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewOrderUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderUseCase creates a new instance of OrderUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderUseCase(t mockConstructorTestingTNewOrderUseCase) *OrderUseCase {
	mock := &OrderUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
