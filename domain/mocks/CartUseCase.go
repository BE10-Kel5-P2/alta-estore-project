// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "altaproject2/domain"

	mock "github.com/stretchr/testify/mock"
)

// CartUseCase is an autogenerated mock type for the CartUseCase type
type CartUseCase struct {
	mock.Mock
}

// DeleteCart provides a mock function with given fields: productID
func (_m *CartUseCase) DeleteCart(productID int) (bool, error) {
	ret := _m.Called(productID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCart provides a mock function with given fields: userid
func (_m *CartUseCase) GetCart(userid int) (domain.Cart, []domain.CartProduct, int) {
	ret := _m.Called(userid)

	var r0 domain.Cart
	if rf, ok := ret.Get(0).(func(int) domain.Cart); ok {
		r0 = rf(userid)
	} else {
		r0 = ret.Get(0).(domain.Cart)
	}

	var r1 []domain.CartProduct
	if rf, ok := ret.Get(1).(func(int) []domain.CartProduct); ok {
		r1 = rf(userid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.CartProduct)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(int) int); ok {
		r2 = rf(userid)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// PostCart provides a mock function with given fields: newcart
func (_m *CartUseCase) PostCart(newcart domain.Cart) int {
	ret := _m.Called(newcart)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Cart) int); ok {
		r0 = rf(newcart)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UpdateData provides a mock function with given fields: newUpdate, productId
func (_m *CartUseCase) UpdateData(newUpdate domain.Cart, productId int) int {
	ret := _m.Called(newUpdate, productId)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Cart, int) int); ok {
		r0 = rf(newUpdate, productId)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewCartUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartUseCase creates a new instance of CartUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartUseCase(t mockConstructorTestingTNewCartUseCase) *CartUseCase {
	mock := &CartUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
