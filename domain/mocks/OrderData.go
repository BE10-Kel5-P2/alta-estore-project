// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "altaproject2/domain"

	mock "github.com/stretchr/testify/mock"
)

// OrderData is an autogenerated mock type for the OrderData type
type OrderData struct {
	mock.Mock
}

// DeleteOrderData provides a mock function with given fields:
func (_m *OrderData) DeleteOrderData() {
	_m.Called()
}

// GetOrderData provides a mock function with given fields:
func (_m *OrderData) GetOrderData() {
	_m.Called()
}

// PostOrderData provides a mock function with given fields: neworder
func (_m *OrderData) PostOrderData(neworder domain.Order) int {
	ret := _m.Called(neworder)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Order) int); ok {
		r0 = rf(neworder)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PostProductOrderData provides a mock function with given fields: newpo
func (_m *OrderData) PostProductOrderData(newpo []domain.ProductOrders) []domain.ProductOrders {
	ret := _m.Called(newpo)

	var r0 []domain.ProductOrders
	if rf, ok := ret.Get(0).(func([]domain.ProductOrders) []domain.ProductOrders); ok {
		r0 = rf(newpo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductOrders)
		}
	}

	return r0
}

// SumTotalPrice provides a mock function with given fields: neworder
func (_m *OrderData) SumTotalPrice(neworder domain.Order) int {
	ret := _m.Called(neworder)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Order) int); ok {
		r0 = rf(neworder)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewOrderData interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderData creates a new instance of OrderData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderData(t mockConstructorTestingTNewOrderData) *OrderData {
	mock := &OrderData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
